# Integer Factorization (20 digits)
# C++ Solution 
# SPOJ-FACT1


#include<iostream>
#include<bits/stdc++.h>
#include<tr1/unordered_map>
using namespace std;
#define fast cin.tie(0);cin.sync_with_stdio(0);
#define ll __int128
#define sumall n(n+1)/2
#define lcm(a,b) ((a)/__gcd(a,b))*(b)
#define fs(n)   fixed<<setprecision(n)

const ll MX = 1e5 + 7, MOD = 1e9 + 7, INF = 1e18 + 7;

map<ll, ll>mp;

ll mult(ll a, ll b, ll m)
{
    if (a < INF && b < INF) return a * b % m;
    ll r = 0;
    while (b)
    {
        if (b & 1) r = (r + a) % m;
        b >>= 1;
        a = (a + a) % m;
    }
    return r;
}

ll f(ll x, ll c, ll m) { return (mult(x, x, m) + c) % m; }

ll power(ll b, ll p, ll m)
{
    ll r = 1;
    while (p)
    {
        if (p & 1) r = mult(r, b, m);
        b = mult(b, b, m);
        p >>= 1;
    }
    return r;
}
bool ch(ll n, ll a, ll d, ll s)
{
    ll x = power(a % n, d, n);
    if (x == 1 || x == n - 1) return false;
    for (ll i = 1; i < s; i++)
    {
        x = mult(x, x, n);
        if (x == n - 1) return false;
    }
    return true;
}

bool m_r(ll n)
{
    if (n < 2)return false;
    ll d = n - 1, s = 0;
    while (d & 1) d >>= 1, s++;
    for (ll a : {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37})
    {
        if (n == a) return true;
        if (ch(n, a, d, s)) return false;
    }
    return true;
}

ll br(ll n, ll x, ll c)
{
    ll g = 1, q = 1, m = 128, xs, y;
    for (ll l = 1; g == 1; l *= 2)
    {
        y = x;
        for (ll i = 1; i < l; i++) x = f(x, c, n);
        for (ll i = 0; i < l && g == 1; i += m)
        {
            xs = x;
            for (ll j = 0; j < min(m, l - i); j++)
            {
                x = f(x, c, n);
                q = mult(q, abs(x - y), n);

            }
            g = __gcd(q, n);
        }
    }
    if (g == n)
    {
        do
        {
            xs = f(xs, c, n);
            g = __gcd(abs(xs - y), n);

        } while (g == 1);

    }
    return g;
}

void fac(ll n)
{
    if (m_r(n)) { mp[n]++; return; }
    ll x = 2, c = 1, g;
    while ((g = br(n, x, c)) == n)
        x = rand() % 1000 + 3, c = rand() % 100 + 3;

    fac(g);
    fac(n / g);
}

ll input()
{
    string s;
    cin >> s;
    ll n = 0;
    for (char ch : s) n = n * 10 + ch - '0';
    return n;
}

void  print(ll n)
{
    string s;
    while (n)
        s.push_back(n % 10 + '0'), n /= 10;
    reverse(s.begin(), s.end());
    cout << s;
}
int main()
{
    fast;
    while (ll n = input())
    {
        mp.clear();
        fac(n);
        for (auto it = mp.begin(); it != mp.end(); it++)
        {
            print(it->first), cout << "^", print(it->second), cout << " ";
        }
        cout << endl;
    }

    return 0;
}
